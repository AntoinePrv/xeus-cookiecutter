
name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  unix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: install mamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: .ci/microenv.yml
          environment-name: microenv

      - name: create project with cookiecutter
        shell: bash -l {0}
        run: 
          cookiecutter  . --no-input -f

      - name: create and activate env
        shell: bash -l {0}
        run: |
          cd xeus-mylang
          $HOME/micromamba-bin/micromamba env create -f environment-dev.yml  -y --name xeus_cookiecutter_test_env
          micromamba activate xeus_cookiecutter_test_env

      - name: install cxx compiler
        shell: bash -l {0}
        run: |
          micromamba activate xeus_cookiecutter_test_env
          $HOME/micromamba-bin/micromamba install cxx-compiler -c conda-forge -y

      - name: cmake configure
        shell: bash -l {0}
        run: |
          micromamba activate xeus_cookiecutter_test_env
          cd xeus-mylang
          mkdir -p bld
          cd bld
          cmake .. \
           -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
           -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX 

      - name: build
        shell: bash -l {0}
        run: |
          cd xeus-mylang/bld
          make -j8

      - name: install
        shell: bash -l {0}
        run: |
          cd xeus-mylang/bld
          make install
  win:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: install mamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: .ci/microenv.yml
          environment-name: microenv

      - name: probe micromamba
        shell: powershell
        run: |
          .\micromamba.exe 

      - name: create project with cookiecutter
        shell: powershell
        run: 
          cookiecutter  . --no-input -f

      - name: create and activate env
        shell: powershell
        run: |
         .\micromamba.exe  env create -f xeus-mylang\environment-dev.yml  -y --name xeus_cookiecutter_test_env
          micromamba activate xeus_cookiecutter_test_env

      - name: install cxx compiler
        shell: powershell
        run: |
          micromamba activate xeus_cookiecutter_test_env
          .\micromamba.exe install cxx-compiler ninja -c conda-forge -y

      - name: cmake configure
        shell: powershell
        run: |
          micromamba activate xeus_cookiecutter_test_env
          cd xeus-mylang
          mkdir -p bld
          cd bld
          cmake .. -G"Ninja" -DCMAKE_BUILD_TYPE=Release  -DDEPENDENCY_SEARCH_PREFIX="%CONDA_PREFIX%\Library" -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library"
          cmake .. \
           -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
           -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX 

      - name: build
        shell: powershell
        run: |
          cd xeus-mylang/bld
          cmake --build . --target ALL_BUILD 


#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest]
#    steps:
#      - uses: actions/checkout@v2
#      - name: install micromamba
#        run: |
#          if [ "$RUNNER_OS" == "Linux" ]; then
#            wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-64/latest | tar -xvj bin/micromamba --strip-components=1
#          else
#            wget -qO- https://micromamba.snakepit.net/api/micromamba/osx-64/latest | tar -xvj bin/micromamba
#            mv bin/micromamba ./micromamba
#          fi
#          ./micromamba shell init -s bash -p ~/micromamba
#          mkdir -p ~/micromamba/pkgs/
#      - name: run tests
#        shell: bash -l {0}
#        run: |
#          export MAMBA_ROOT_PREFIX=~/micromamba
#          export MAMBA_EXE=$(pwd)/micromamba
#          . $MAMBA_ROOT_PREFIX/etc/profile.d/mamba.sh
#          chmod +x .ci/test_project.sh || exit 1
#          ./.ci/test_project.sh || exit 1
#
#
#      - name: Push
#        uses: s0/git-publish-subdir-action@develop
#        env:
#          REPO: self
#          BRANCH: rendered # The branch name where you want to push the assets
#          FOLDER: xeus-mylang # The directory where your assets are generated
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
#          MESSAGE: "added rendered: ({sha}) {msg}" # The commit message
          
          
#   test_win_shells:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest]
#     steps:
#       - uses: actions/checkout@v2
#       - name: install micromamba
#         shell: powershell
#         run: |
#           Invoke-Webrequest -URI https://micromamba.snakepit.net/api/micromamba/win-64/latest -OutFile micromamba.tar.bz2
#           C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar.bz2 -aoa
#           C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar -ttar -aoa -r Library\bin\micromamba.exe
#           MOVE -Force Library\bin\micromamba.exe micromamba.exe
#           .\micromamba.exe shell init -s powershell -p ~/micromamba
#       - name: install deps
#         shell: powershell
#         run: |
#           $Env:MAMBA_ROOT_PREFIX=(Join-Path -Path $HOME -ChildPath micromamba)
#           $Env:MAMBA_EXE=(Join-Path -Path (Get-Location) -ChildPath micromamba.exe)
#           .\micromamba.exe create -f ./test/env_win.yaml -y
#       - name: run tests
#         shell: powershell
#         run: |
#           # micromamba activate test
#           ~/micromamba/envs/test/Scripts/pip.exe install -e .
#           ~/micromamba/envs/test/Scripts/pytest.exe test/
#           if ($LastExitCode -ne 0) {
#             exit 1
#           }
